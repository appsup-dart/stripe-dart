{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"stripe","qualifiedName":"stripe/stripe","packageName":"stripe","packageIntro":"<h1>Stripe Dart</h1>\n<p><a href=\"https://drone.io/github.com/enyo/stripe-dart/latest\">!<a href=\"https://drone.io/github.com/enyo/stripe-dart/status.png\">Build Status</a></a></p>\n<blockquote>\n<p>This library is not finished yet. <strong>Do not use.</strong>  \nIt will be ready to go in a few weeks.</p></blockquote>\n<p>Stripe API implemented in dart.</p>\n<p>Most of the model class documentations have been taken from the\n<a href=\"https://stripe.com/docs\">stripe documentation</a>.</p>\n<p>This implementation is based on the official Stripe Java and NodeJS API wrappers\nand written as a proper native dart library.</p>\n<h2>Usage</h2>\n<pre class=\"dart\"><code>import \"package:stripe/stripe.dart\";\n\nmain() {\n\n  StripeService.apiKey = \"sk_test_BQokikJOvBiI2HlWgH4olfQ2\";\n\n  var card = new CardCreation()\n      ..number = \"123123123\";\n\n  new CustomerCreation()\n      ..description = \"Customer for test@example.com\"\n      ..card = card\n      ..create()\n      .then((Customer customer) =&gt; print(customer))\n      .catchError((e) =&gt; handleError(e));\n\n}\n</code></pre>"},{"name":"dart-pkg-collection-algorithms","qualifiedName":"collection/dart-pkg-collection-algorithms","preview":"<p>Operations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection","qualifiedName":"collection/dart-pkg-collection","preview":"<p>Exports all the individual parts of the collection-helper library.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-equality","qualifiedName":"collection/dart-pkg-collection-equality","preview":"<p>Defines equality relations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-iterable_zip","qualifiedName":"collection/dart-pkg-collection-iterable_zip","preview":"<p>Zipping multiple iterables into one iterable of tuples of values.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-priority_queue","qualifiedName":"collection/dart-pkg-collection-priority_queue","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","preview":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"crypto","qualifiedName":"crypto/crypto","preview":"<p>Cryptographic algorithms, with support for hash functions such as\nSHA-1, SHA-256, HMAC, and MD5.</p>","packageName":"crypto","packageIntro":""},{"name":"http-browser_client","qualifiedName":"http/http-browser_client","packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"name":"http","qualifiedName":"http/http","preview":"<p>A composable, <a>http/dart-async.Future</a>-based library for making HTTP requests.</p>","packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"name":"http-testing","qualifiedName":"http/http-testing","preview":"<p>This library contains testing classes for the HTTP library.</p>","packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"name":"http_parser","qualifiedName":"http_parser/http_parser","packageName":"http_parser","packageIntro":"<p><code>http_parser</code> is a platform-independent package for parsing and serializing\nvarious HTTP-related formats. It's designed to be usable on both the browser and\nthe server, and thus avoids referencing any types from <code>dart:io</code> or <code>dart:html</code>.</p>"},{"name":"logging","qualifiedName":"logging/logging","preview":"<p>Support for logging.</p>","packageName":"logging","packageIntro":""},{"name":"matcher","qualifiedName":"matcher/matcher","preview":"<p>Support for specifying test expectations, such as for unit tests.</p>","packageName":"matcher","packageIntro":""},{"name":"matcher-mirror_matchers","qualifiedName":"matcher/matcher-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of <code>dart:mirrors</code>.</p>","packageName":"matcher","packageIntro":""},{"name":"mock","qualifiedName":"mock/mock","preview":"<p>A simple mocking/spy library.</p>","packageName":"mock","packageIntro":""},{"name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageName":"path","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageName":"stack_trace","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>\n<h2>Stack Chains</h2>\n<p>This library also provides the ability to capture \"stack chains\" with the\n<code>Chain</code> class. When writing asynchronous code, a single stack trace isn't very\nuseful, since the call stack is unwound every time something async happens. A\nstack chain tracks stack traces through asynchronous calls, so that you can see\nthe full path from <code>main</code> down to the error.</p>\n<p>To use stack chains, just wrap the code that you want to track in\n<code>Chain.capture</code>. This will create a new <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-async.Zone\">Zone</a> in which stack traces are\nrecorded and woven into chains every time an asynchronous call occurs. Zones are\nsticky, too, so any asynchronous operations started in the <code>Chain.capture</code>\ncallback will have their chains tracked, as will asynchronous operations they\nstart and so on.</p>\n<p>Here's an example of some code that doesn't capture its stack chains:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nvoid main() {\n  scheduleAsync();\n}\n\nvoid scheduleAsync() {\n  return new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>If we run this, it prints the following:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \n#0      runAsync (file:///usr/local/google-old/home/goog/dart/dart/test.dart:13:3)\n#1      scheduleAsync.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:9:28)\n#2      _rootRunUnary (dart:async/zone.dart:717)\n#3      _RootZone.runUnary (dart:async/zone.dart:854)\n#4      _Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:488)\n#5      _Future._propagateToListeners (dart:async/future_impl.dart:571)\n#6      _Future._complete (dart:async/future_impl.dart:317)\n#7      _SyncCompleter.complete (dart:async/future_impl.dart:44)\n#8      Future.Future.delayed.&lt;anonymous closure&gt; (dart:async/future.dart:219)\n#9      _createTimer.&lt;anonymous closure&gt; (dart:async-patch/timer_patch.dart:11)\n#10     _handleTimeout (dart:io/timer_impl.dart:292)\n#11     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:115)\n</code></pre>\n<p>Notice how there's no mention of <code>main</code> in that stack trace. All we know is that\nthe error was in <code>runAsync</code>; we don't know why <code>runAsync</code> was called.</p>\n<p>Now let's look at the same code with stack chains captured:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nimport 'package:stack_trace/stack_trace.dart';\n\nvoid main() {\n  Chain.capture(() {\n    scheduleAsync();\n  });\n}\n\nvoid scheduleAsync() {\n  new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>Now if we run it, it prints this:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \ntest.dart 17:3                                                runAsync\ntest.dart 13:28                                               scheduleAsync.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 129:26  registerUnaryCallback.&lt;fn&gt;.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 177:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 175:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 129:18  registerUnaryCallback.&lt;fn&gt;\ndart:async/zone.dart 717                                      _rootRunUnary\ndart:async/zone.dart 449                                      _ZoneDelegate.runUnary\ndart:async/zone.dart 654                                      _CustomizedZone.runUnary\ndart:async/future_impl.dart 488                               _Future._propagateToListeners.handleValueCallback\ndart:async/future_impl.dart 571                               _Future._propagateToListeners\ndart:async/future_impl.dart 317                               _Future._complete\ndart:async/future_impl.dart 44                                _SyncCompleter.complete\ndart:async/future.dart 219                                    Future.Future.delayed.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 706                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 710                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\ndart:async-patch/timer_patch.dart 11                          _createTimer.&lt;fn&gt;\ndart:io/timer_impl.dart 292                                   _handleTimeout\ndart:isolate-patch/isolate_patch.dart 115                     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async/zone.dart 476                   _ZoneDelegate.registerUnaryCallback\ndart:async/zone.dart 666                   _CustomizedZone.registerUnaryCallback\ndart:async/future_impl.dart 164            _Future._Future._then\ndart:async/future_impl.dart 187            _Future.then\ntest.dart 13:12                            scheduleAsync\ntest.dart 7:18                             main.&lt;fn&gt;\ndart:async/zone.dart 710                   _rootRun\ndart:async/zone.dart 440                   _ZoneDelegate.run\ndart:async/zone.dart 650                   _CustomizedZone.run\ndart:async/zone.dart 944                   runZoned\npackage:stack_trace/src/chain.dart 93:20   Chain.capture\ntest.dart 6:16                             main\ndart:isolate-patch/isolate_patch.dart 216  _startIsolate.isolateStartHandler\ndart:isolate-patch/isolate_patch.dart 115  _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot of text! If you look closely, though, you can see that <code>main</code> is\nlisted in the first trace in the chain.</p>\n<p>Thankfully, you can call <code>Chain.terse</code> just like <code>Trace.terse</code> to get rid of all\nthe frames you don't care about. The terse version of the stack chain above is\nthis:</p>\n<pre><code>test.dart 17:3   runAsync\ntest.dart 13:28  scheduleAsync.&lt;fn&gt;\ndart:isolate     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async                                _Future.then\ntest.dart 13:12                           scheduleAsync\ntest.dart 7:18                            main.&lt;fn&gt;\npackage:stack_trace/src/chain.dart 93:20  Chain.capture\ntest.dart 6:16                            main\ndart:isolate                              _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot easier to understand!</p>\n<h3><code>Chain.track</code></h3>\n<p>For the most part <code>Chain.capture</code> will notice when an error is thrown and\nassociate the correct stack chain with it. However, there are some cases where\nexceptions won't be automatically detected: any <code>Future</code> constructor,\n<code>Completer.completeError</code>, <code>Stream.addError</code>, and libraries that use these such\nas <code>dart:io</code> and <code>dart:async</code>. For these, all you need to do is wrap the Future\nor Stream in a call to <code>Chain.track</code> and the errors will be tracked correctly.</p>"},{"name":"string_scanner","qualifiedName":"string_scanner/string_scanner","preview":"<p>A library for parsing strings using a sequence of patterns.</p>","packageName":"string_scanner","packageIntro":"<p>This package exposes a <code>StringScanner</code> type that makes it easy to parse a string\nusing a series of <code>Pattern</code>s. For example:</p>\n<pre class=\"dart\"><code>import 'dart:math';\n\nimport 'package:string_scanner/string_scanner.dart';\n\nnum parseNumber(String source) {\n  // Scan a number (\"1\", \"1.5\", \"-3\").\n  var scanner = new StringScanner(source);\n\n  // [Scanner.scan] tries to consume a [Pattern] and returns whether or not it\n  // succeeded. It will move the scan pointer past the end of the pattern.\n  var negative = scanner.scan(\"-\");\n\n  // [Scanner.expect] consumes a [Pattern] and throws a [FormatError] if it\n  // fails. Like [Scanner.scan], it will move the scan pointer forward.\n  scanner.expect(new RegExp(r\"\\d+\"));\n\n  // [Scanner.lastMatch] holds the [MatchData] for the most recent call to\n  // [Scanner.scan], [Scanner.expect], or [Scanner.matches].\n  var number = int.parse(scanner.lastMatch[0]);\n\n  if (scanner.scan(\".\")) {\n    scanner.expect(new RegExp(r\"\\d+\"));\n    var decimal = scanner.lastMatch[0];\n    number += int.parse(decimal) / math.pow(10, decimal.length);\n  }\n\n  // [Scanner.expectDone] will throw a [FormatError] if there's any input that\n  // hasn't yet been consumed.\n  scanner.expectDone();\n\n  return (negative ? -1 : 1) * number;\n}\n</code></pre>"},{"name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar\nis updated in-place before and after each test is executed. If all tests\npass, only a couple of lines are printed in the terminal. If a test fails,\nthe failure is shown and the progress bar continues to be updated below it.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-matcher","qualifiedName":"unittest/unittest-matcher","preview":"<p><code>unittest.matcher</code> has been moved to the <code>matcher</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mirror_matchers","qualifiedName":"unittest/unittest-mirror_matchers","preview":"<p><code>unittest.mirror_matchers</code> has been moved to the <code>matcher</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mock","qualifiedName":"unittest/unittest-mock","preview":"<p><code>unittest.mock</code> has been moved to the <code>mock</code> package.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageName":"unittest","packageIntro":""},{"name":"dart-collection","qualifiedName":"dart-collection","preview":"<p>Classes and utilities that supplement the collection support in dart:core.</p>","packageName":""},{"name":"dart-math","qualifiedName":"dart-math","preview":"<p>Mathematical constants and functions, plus a random number generator.</p>","packageName":""},{"name":"dart-convert","qualifiedName":"dart-convert","preview":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>","packageName":""},{"name":"dart-async","qualifiedName":"dart-async","preview":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>","packageName":""},{"name":"dart-isolate","qualifiedName":"dart-isolate","preview":"<p>Concurrent programming using <em>isolates</em>:\nindependent workers that are similar to threads\nbut don't share memory,\ncommunicating only via messages.</p>","packageName":""},{"name":"dart-mirrors","qualifiedName":"dart-mirrors","preview":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>","packageName":""},{"name":"dart-io","qualifiedName":"dart-io","preview":"<p>File, socket, HTTP, and other I/O support for server applications.</p>","packageName":""},{"name":"dart-typed_data","qualifiedName":"dart-typed_data","preview":"<p>Specialized integers and floating point numbers,\nwith SIMD support and efficient lists.</p>","packageName":""},{"name":"dart-dom-html","qualifiedName":"dart-dom-html","preview":"<p>HTML elements and other resources for web-based applications that need to\ninteract with the browser and the DOM (Document Object Model).</p>","packageName":""},{"name":"dart-dom-web_gl","qualifiedName":"dart-dom-web_gl","preview":"<p>3D programming in the browser.</p>","packageName":""},{"name":"dart-dom-indexed_db","qualifiedName":"dart-dom-indexed_db","preview":"<p>A client-side key-value store with support for indexes.</p>","packageName":""},{"name":"dart-dom-svg","qualifiedName":"dart-dom-svg","preview":"<p>Scalable Vector Graphics:\nTwo-dimensional vector graphics with support for events and animation.</p>","packageName":""},{"name":"dart-dom-web_audio","qualifiedName":"dart-dom-web_audio","preview":"<p>High-fidelity audio programming in the browser.</p>","packageName":""},{"name":"dart-dom-web_sql","qualifiedName":"dart-dom-web_sql","preview":"<p>An API for storing data in the browser that can be queried with SQL.</p>","packageName":""},{"name":"dart-js","qualifiedName":"dart-js","preview":"<p>Support for interoperating with JavaScript.</p>","packageName":""}],"introduction":"<p>Welcome to the Dart API reference documentation,\ncovering the official Dart API libraries.\nSome of the most fundamental Dart libraries include:</p><ul><li>\n<p><a href=\"#dart:core\">dart:core</a>:\n  Core functionality such as strings, numbers, collections, errors,\n  dates, and URIs.</p></li><li>\n<p><a href=\"#dart:html\">dart:html</a>:\n  DOM manipulation for web apps.</p></li><li>\n<p><a href=\"#dart:io\">dart:io</a>:\n  I/O for command-line apps.</p></li></ul>\n<p>Except for dart:core, you must import a library before you can use it.\nHere's an example of importing dart:html, dart:math, and a\nthird popular library called\n<a href=\"http://www.dartlang.org/polymer-dart/\">polymer.dart</a>:</p>\n<pre><code>import 'dart:html';\nimport 'dart:math';\nimport 'package:polymer/polymer.dart';\n</code></pre>\n<p>Polymer.dart is an example of a library that isn't\nincluded in the Dart download,\nbut is easy to get and update using the <em>pub package manager</em>.\nFor information on finding, using, and publishing libraries (and more)\nwith pub, see\n<a href=\"http://pub.dartlang.org\">pub.dartlang.org</a>.</p>\n<p>The main site for learning and using Dart is\n<a href=\"http://www.dartlang.org\">www.dartlang.org</a>.\nCheck out these pages:</p><ul><li><a href=\"http://www.dartlang.org\">Dart homepage</a></li><li><a href=\"http://www.dartlang.org/docs/tutorials/\">Tutorials</a></li><li><a href=\"http://www.dartlang.org/docs/\">Programmer's Guide</a></li><li><a href=\"http://www.dartlang.org/samples/\">Samples</a></li><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">A Tour of the Dart Libraries</a></li></ul>\n<p>This API reference is automatically generated from the source code in the\n<a href=\"https://code.google.com/p/dart/\">Dart project</a>.\nIf you'd like to contribute to this documentation, see\n<a href=\"https://code.google.com/p/dart/wiki/Contributing\">Contributing</a>\nand\n<a href=\"https://code.google.com/p/dart/wiki/WritingApiDocumentation\">Writing API Documentation</a>.</p>","filetype":"json","start-page":"stripe"}
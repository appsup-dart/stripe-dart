{"name":"Card","qualifiedName":"stripe/stripe.Card","comment":"<p>You can store multiple credit cards for a customer in order to charge the\ncustomer later.</p>","isAbstract":false,"superclass":"stripe/stripe.Resource","implements":[],"subclass":[],"variables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Card.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Resource.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"id":{"name":"id","qualifiedName":"stripe/stripe.Card.id","comment":"<p>ID of card (used in conjunction with a customer ID)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"expMonth":{"name":"expMonth","qualifiedName":"stripe/stripe.Card.expMonth","comment":"","commentFrom":"stripe.Card.expMonth","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"expYear":{"name":"expYear","qualifiedName":"stripe/stripe.Card.expYear","comment":"","commentFrom":"stripe.Card.expYear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"fingerprint":{"name":"fingerprint","qualifiedName":"stripe/stripe.Card.fingerprint","comment":"<p>Uniquely identifies this particular card number. You can use this\nattribute to check whether two customers whoâ€™ve signed up with you are\nusing the same card number, for example.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"last4":{"name":"last4","qualifiedName":"stripe/stripe.Card.last4","comment":"","commentFrom":"stripe.Card.last4","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"stripe/stripe.Card.type","comment":"<p>Card brand. Can be Visa, American Express, MasterCard, Discover, JCB,\nDiners Club, or Unknown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressCity":{"name":"addressCity","qualifiedName":"stripe/stripe.Card.addressCity","comment":"","commentFrom":"stripe.Card.addressCity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressCountry":{"name":"addressCountry","qualifiedName":"stripe/stripe.Card.addressCountry","comment":"<p>Billing address country, if provided when creating card</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressLine1":{"name":"addressLine1","qualifiedName":"stripe/stripe.Card.addressLine1","comment":"","commentFrom":"stripe.Card.addressLine1","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressLine1Check":{"name":"addressLine1Check","qualifiedName":"stripe/stripe.Card.addressLine1Check","comment":"<p>If address_line1 was provided, results of the check: pass, fail,\nor unchecked.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressLine2":{"name":"addressLine2","qualifiedName":"stripe/stripe.Card.addressLine2","comment":"","commentFrom":"stripe.Card.addressLine2","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressState":{"name":"addressState","qualifiedName":"stripe/stripe.Card.addressState","comment":"","commentFrom":"stripe.Card.addressState","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressZip":{"name":"addressZip","qualifiedName":"stripe/stripe.Card.addressZip","comment":"","commentFrom":"stripe.Card.addressZip","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"addressZipCheck":{"name":"addressZipCheck","qualifiedName":"stripe/stripe.Card.addressZipCheck","comment":"<p>If address_zip was provided, results of the check: pass, fail,\nor unchecked.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"country":{"name":"country","qualifiedName":"stripe/stripe.Card.country","comment":"","commentFrom":"stripe.Card.country","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"customer":{"name":"customer","qualifiedName":"stripe/stripe.Card.customer","comment":"<p>ID of the customer this card belongs to</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"customerExpand":{"name":"customerExpand","qualifiedName":"stripe/stripe.Card.customerExpand","comment":"<p><a>stripe/stripe.Customer</a> object this card belongs to\nThis will return null if you call retrieve without expanding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Customer","inner":[]}],"parameters":{},"annotations":[]},"cvcCheck":{"name":"cvcCheck","qualifiedName":"stripe/stripe.Card.cvcCheck","comment":"<p>If a CVC was provided, results of the check: pass, fail, or unchecked</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"stripe/stripe.Card.name","comment":"<p>Cardholder name</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"fromMap":{"name":"fromMap","qualifiedName":"stripe/stripe.Card.Card-fromMap","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"dataMap":{"name":"dataMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"retrieve":{"name":"retrieve","qualifiedName":"stripe/stripe.Card.retrieve","comment":"<p>By default, you can see the 10 most recent cards stored on a customer\ndirectly on the customer object, but you can also retrieve details about a\nspecific card stored on the customer.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Card","inner":[]}]}],"parameters":{"customerId":{"name":"customerId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"cardId":{"name":"cardId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"list":{"name":"list","qualifiedName":"stripe/stripe.Card.list","comment":"<p>Retrieves a <a>stripe/stripe.CardCollection</a> of the cards for the customer with the\nspecified customerId.</p>\n<p>You can see a list of the customer's cards. Note that the 10 most recent\ncards are always available by default on the customer object. If you need\nmore than those 10, you can use the limit and starting_after parameters to\npage through additional cards.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.CardCollection","inner":[]}]}],"parameters":{"customerId":{"name":"customerId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"limit":{"name":"limit","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"startingAfter":{"name":"startingAfter","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"endingBefore":{"name":"endingBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"delete":{"name":"delete","qualifiedName":"stripe/stripe.Card.delete","comment":"<p>You can delete cards from a customer. If you delete a card that is\ncurrently a customer's default, the most recently added card will be used\nas the new default. If you delete the customer's last remaining card,\nthe default_card attribute on the customer will become null.</p>\n<p>Note that you may want to prevent customers on paid subscriptions from\ndeleting all cards on file so that there is at least one default card for\nthe next invoice payment attempt.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"customerId":{"name":"customerId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"cardId":{"name":"cardId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.Card.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.Card.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.Card.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.Card.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.Card.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.Card.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.Card.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.Card.noSuchMethod","comment":"<p><a>stripe/stripe.Card.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.Card.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.Card.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.Card.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
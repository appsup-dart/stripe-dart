{"name":"Charge","qualifiedName":"stripe/stripe.Charge","comment":"<p>To charge a credit or a debit card, you create a new charge object.\nYou can retrieve and refund individual charges as well as list all charges.\nCharges are identified by a unique random ID.</p>","isAbstract":false,"superclass":"stripe/stripe.Resource","implements":[],"subclass":[],"variables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Charge.objectName","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Resource.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"id":{"name":"id","qualifiedName":"stripe/stripe.Charge.id","comment":"","commentFrom":"stripe.Charge.id","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"livemode":{"name":"livemode","qualifiedName":"stripe/stripe.Charge.livemode","comment":"","commentFrom":"stripe.Charge.livemode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"amount":{"name":"amount","qualifiedName":"stripe/stripe.Charge.amount","comment":"<p>Amount charged in cents</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"captured":{"name":"captured","qualifiedName":"stripe/stripe.Charge.captured","comment":"<p>If the charge was created without capturing, this boolean represents\nwhether or not it is still uncaptured or has since been captured.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"card":{"name":"card","qualifiedName":"stripe/stripe.Charge.card","comment":"<p>Hash describing the card used to make the charge</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Card","inner":[]}],"parameters":{},"annotations":[]},"created":{"name":"created","qualifiedName":"stripe/stripe.Charge.created","comment":"","commentFrom":"stripe.Charge.created","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"currency":{"name":"currency","qualifiedName":"stripe/stripe.Charge.currency","comment":"<p>Three-letter ISO currency code representing the currency in which the\ncharge was made.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"paid":{"name":"paid","qualifiedName":"stripe/stripe.Charge.paid","comment":"","commentFrom":"stripe.Charge.paid","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"refunded":{"name":"refunded","qualifiedName":"stripe/stripe.Charge.refunded","comment":"<p>Whether or not the charge has been fully refunded. If the charge is only\npartially refunded, this attribute will still be false.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"refunds":{"name":"refunds","qualifiedName":"stripe/stripe.Charge.refunds","comment":"<p>A list of refunds that have been applied to the charge.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"stripe/stripe.Refund","inner":[]}]}],"parameters":{},"annotations":[]},"amountRefunded":{"name":"amountRefunded","qualifiedName":"stripe/stripe.Charge.amountRefunded","comment":"<p>Amount in cents refunded (can be less than the amount attribute on the\ncharge if a partial refund was issued)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"balanceTransaction":{"name":"balanceTransaction","qualifiedName":"stripe/stripe.Charge.balanceTransaction","comment":"<p>Balance transaction id that describes the impact of this charge on your\naccount balance (not including refunds or disputes).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"balanceTransactionExpand":{"name":"balanceTransactionExpand","qualifiedName":"stripe/stripe.Charge.balanceTransactionExpand","comment":"<p><a>stripe/stripe.Balance</a> object that describes the impact of this charge on your\naccount balance (not including refunds or disputes).\nThis will return null if you call retrieve without expanding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Balance","inner":[]}],"parameters":{},"annotations":[]},"customer":{"name":"customer","qualifiedName":"stripe/stripe.Charge.customer","comment":"<p>ID of the customer this charge is for if one exists</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"customerExpand":{"name":"customerExpand","qualifiedName":"stripe/stripe.Charge.customerExpand","comment":"<p><a>stripe/stripe.Customer</a> object of this charge is for if one exists\nThis will return null if you call retrieve without expanding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Customer","inner":[]}],"parameters":{},"annotations":[]},"description":{"name":"description","qualifiedName":"stripe/stripe.Charge.description","comment":"","commentFrom":"stripe.Charge.description","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"dispute":{"name":"dispute","qualifiedName":"stripe/stripe.Charge.dispute","comment":"<p>Details about the dispute if the charge has been disputed</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Dispute","inner":[]}],"parameters":{},"annotations":[]},"failureCode":{"name":"failureCode","qualifiedName":"stripe/stripe.Charge.failureCode","comment":"<p>Error code explaining reason for charge failure if available\n(see https://stripe.com/docs/api#errors for a list of codes)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"failureMessage":{"name":"failureMessage","qualifiedName":"stripe/stripe.Charge.failureMessage","comment":"<p>Message to user further explaining reason for charge failure if available</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"invoice":{"name":"invoice","qualifiedName":"stripe/stripe.Charge.invoice","comment":"<p>ID of the invoice this charge is for if one exists</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"invoiceExpand":{"name":"invoiceExpand","qualifiedName":"stripe/stripe.Charge.invoiceExpand","comment":"<p><a>stripe/stripe.Invoice</a> object this charge is for if one exists\nThis will return null if you call retrieve without expanding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Invoice","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"stripe/stripe.Charge.metadata","comment":"<p>A set of key/value pairs that you can attach to a charge object.\nIt can be useful for storing additional information about the charge in\na structured format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"statement_description":{"name":"statement_description","qualifiedName":"stripe/stripe.Charge.statement_description","comment":"<p>Extra information about a charge for the customerâ€™s credit card statement.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"fromMap":{"name":"fromMap","qualifiedName":"stripe/stripe.Charge.Charge-fromMap","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"dataMap":{"name":"dataMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"retrieve":{"name":"retrieve","qualifiedName":"stripe/stripe.Charge.retrieve","comment":"<p>Returns a charge object if a valid identifier was provided.</p>\n<p>If you need the <a>stripe/stripe.Balance</a>, <a>stripe/stripe.Customer</a> or <a>stripe/stripe.Invoice</a> object of this charge\nyou can avoid an additional API request e.g.:</p>\n<pre><code>Charge.retrieve(id, data: {\"expand\": [\"Customer\"]})\n</code></pre>\n<p>or</p>\n<pre><code>Charge.retrieve(id, data: {\"expand\": [\"Balance\", \"Customer\", \"Invoice\"]})\n</code></pre>\n<p>then retrieve the e.g. <a>stripe/stripe.Customer</a> using <a>stripe/stripe.Charge.customerExpand</a>\nOnly expand resources on demand.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Charge","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"refund":{"name":"refund","qualifiedName":"stripe/stripe.Charge.refund","comment":"<p>Refunds a charge that has previously been created but not yet refunded.\nFunds will be refunded to the credit or debit card that was originally\ncharged. The fees you were originally charged are also refunded.</p>\n<p>You can optionally refund only part of a charge. You can do so as many\ntimes as you wish until the entire charge has been refunded.</p>\n<p>Once entirely refunded, a charge can't be refunded again. This method will\nreturn an error when called on an already-refunded charge, or when trying\nto refund more money than is left on a charge.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Charge","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"refundApplicationFee":{"name":"refundApplicationFee","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"capture":{"name":"capture","qualifiedName":"stripe/stripe.Charge.capture","comment":"<p>Capture the payment of an existing, uncaptured, charge. This is the second\nhalf of the two-step payment flow, where first you created a charge with\nthe capture option set to false.</p>\n<p>Uncaptured payments expire exactly seven days after they are created.\nIf they are not captured by that point in time, they will be marked as\nrefunded and will no longer be capturable.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Charge","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"refundApplicationFee":{"name":"refundApplicationFee","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"list":{"name":"list","qualifiedName":"stripe/stripe.Charge.list","comment":"<p>Returns a <a>stripe/stripe.ChargeCollection</a> of your charges.\nReturns a list of charges you've previously created. The charges are\nreturned in sorted order, with the most recent charges appearing first.</p>\n<p><a>stripe/stripe.Charge.list.created</a>: A filter on the list based on the object created field.\nThe value can be a string with an exact UTC timestamp, or it can be a\ndictionary with the following options:\n  <strong>gt</strong> optional\n  Return values where the created field is after this timestamp.\n  <strong>gte</strong> optional\n  Return values where the created field is after or equal to this timestamp.\n  <strong>lt</strong> optional\n  Return values where the created field is before this timestamp.\n  <strong>lte</strong> optional\n  Return values where the created field is before or equal to this timestamp.</p>\n<p><a>stripe/stripe.Charge.list.customer</a>: Only return charges for the customer specified by this\ncustomer ID.</p>\n<p><a>stripe/stripe.Charge.list.endingBefore</a>: A cursor for use in pagination. ending<em>before is an object\nID that defines your place in the list. For instance, if you make a list\nrequest and receive 100 objects, starting with obj</em>bar, your subsequent\ncall can include ending<em>before=obj</em>bar in order to fetch the previous page\nof the list.</p>\n<p><a>stripe/stripe.Charge.list.limit</a>: A limit on the number of objects to be returned. Limit can range\nbetween 1 and 100 items.</p>\n<p><a>stripe/stripe.Charge.list.startingAfter</a> A cursor for use in pagination. starting<em>after is an object\nID that defines your place in the list. For instance, if you make a list\nrequest and receive 100 objects, ending with obj</em>foo, your subsequent call\ncan include starting<em>after=obj</em>foo in order to fetch the next page\nof the list.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.ChargeCollection","inner":[]}]}],"parameters":{"created":{"name":"created","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"customer":{"name":"customer","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"limit":{"name":"limit","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"startingAfter":{"name":"startingAfter","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"endingBefore":{"name":"endingBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.Charge.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.Charge.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.Charge.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.Charge.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.Charge.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.Charge.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.Charge.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.Charge.noSuchMethod","comment":"<p><a>stripe/stripe.Charge.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.Charge.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.Charge.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.Charge.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
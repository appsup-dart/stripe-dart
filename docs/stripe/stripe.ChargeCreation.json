{"name":"ChargeCreation","qualifiedName":"stripe/stripe.ChargeCreation","comment":"<p>Used to create <a>stripe/stripe.Charge</a></p>","isAbstract":false,"superclass":"stripe/stripe.ResourceRequest","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"amount=":{"name":"amount=","qualifiedName":"stripe/stripe.ChargeCreation.amount=","comment":"<p>A positive integer in the smallest currency unit\n(e.g 100 cents to charge $1.00, or 1 to charge Â¥1, a 0-decimal currency)\nrepresenting how much to charge the card. The minimum amount is $0.50\n(or equivalent in charge currency).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"amount":{"name":"amount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"currency=":{"name":"currency=","qualifiedName":"stripe/stripe.ChargeCreation.currency=","comment":"<p>3-letter ISO code for currency.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currency":{"name":"currency","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"customer=":{"name":"customer=","qualifiedName":"stripe/stripe.ChargeCreation.customer=","comment":"<p>The ID of an existing customer that will be charged in this request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"customer":{"name":"customer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cardId=":{"name":"cardId=","qualifiedName":"stripe/stripe.ChargeCreation.cardId=","comment":"<p>A card to be charged. If you also pass a customer ID, the card must be\nthe ID of a card belonging to the customer. Otherwise, if you do not pass\na customer ID, the card you provide must either be a token, like the ones\nreturned by Stripe.js, or a hash containing a user's credit card details,\nwith the options described below. Although not all information is\nrequired, the extra info helps prevent fraud.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"cardId":{"name":"cardId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cardToken=":{"name":"cardToken=","qualifiedName":"stripe/stripe.ChargeCreation.cardToken=","comment":"<p>A card to be charged. If you also pass a customer ID, the card must be\nthe ID of a card belonging to the customer. Otherwise, if you do not pass\na customer ID, the card you provide must either be a token, like the ones\nreturned by Stripe.js, or a hash containing a user's credit card details,\nwith the options described below. Although not all information is\nrequired, the extra info helps prevent fraud.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"cardToken":{"name":"cardToken","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"card=":{"name":"card=","qualifiedName":"stripe/stripe.ChargeCreation.card=","comment":"<p>A card to be charged. If you also pass a customer ID, the card must be\nthe ID of a card belonging to the customer. Otherwise, if you do not pass\na customer ID, the card you provide must either be a token, like the ones\nreturned by Stripe.js, or a hash containing a user's credit card details,\nwith the options described below. Although not all information is\nrequired, the extra info helps prevent fraud.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"card":{"name":"card","optional":false,"named":false,"default":false,"type":[{"outer":"stripe/stripe.CardCreation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"description=":{"name":"description=","qualifiedName":"stripe/stripe.ChargeCreation.description=","comment":"<p>An arbitrary string which you can attach to a charge object.\nIt is displayed when in the web interface alongside the charge.\nNote that if you use Stripe to send automatic email receipts to your\ncustomers, your receipt emails will include the description of the\ncharge(s) that they are describing.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"stripe/stripe.ChargeCreation.metadata=","comment":"<p>A set of key/value pairs that you can attach to a charge object.\nIt can be useful for storing additional information about the customer in\na structured format. It's often a good idea to store an email address in\nmetadata for tracking later.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"capture=":{"name":"capture=","qualifiedName":"stripe/stripe.ChargeCreation.capture=","comment":"<p>Whether or not to immediately capture the charge. When false, the charge\nissues an authorization (or pre-authorization), and will need to be\ncaptured later. Uncaptured charges expire in 7 days. For more information,\nsee authorizing charges and settling later.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"capture":{"name":"capture","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"statementDescription=":{"name":"statementDescription=","qualifiedName":"stripe/stripe.ChargeCreation.statementDescription=","comment":"<p>An arbitrary string to be displayed alongside your company name on your\ncustomer's credit card statement. This may be up to 15 characters.\nAs an example, if your website is RunClub and you specify 5K Race Ticket,\nthe user will see\nRUNCLUB 5K RACE TICKET.\nThe statement description may not include &lt;>\"' characters.\nWhile most banks display this information consistently, some may display\nit incorrectly or not at all.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statementDescription":{"name":"statementDescription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applicationFee=":{"name":"applicationFee=","qualifiedName":"stripe/stripe.ChargeCreation.applicationFee=","comment":"<p>A fee in cents that will be applied to the charge and transferred to the\napplication owner's Stripe account. The request must be made with an\nOAuth key in order to take an application fee. For more information,\nsee the application fees documentation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"applicationFee":{"name":"applicationFee","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"stripe/stripe.ChargeCreation.create","comment":"<p>Uses the values of <a>stripe/stripe.CardCreation</a> to send a request to the Stripe API.\nReturns a <a>stripe/dart-async.Future</a> with a new <a>stripe/stripe.Charge</a> from the response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Charge","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.ChargeCreation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.ChargeCreation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.ChargeCreation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.ChargeCreation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.ChargeCreation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.ChargeCreation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.ChargeCreation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.ChargeCreation.noSuchMethod","comment":"<p><a>stripe/stripe.ChargeCreation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.ChargeCreation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.ChargeCreation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.ChargeCreation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
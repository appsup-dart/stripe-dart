{"name":"ChargeCreation","qualifiedName":"stripe/stripe.ChargeCreation","comment":"<p><a href=\"https://stripe.com/docs/api/curl#create_charge\">Creating a new charge (charging a credit card)</a></p>","isAbstract":false,"superclass":"stripe/stripe.ResourceRequest","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"amount=":{"name":"amount=","qualifiedName":"stripe/stripe.ChargeCreation.amount=","comment":"","commentFrom":"stripe.ChargeCreation.amount=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"amount":{"name":"amount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"currency=":{"name":"currency=","qualifiedName":"stripe/stripe.ChargeCreation.currency=","comment":"","commentFrom":"stripe.ChargeCreation.currency=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currency":{"name":"currency","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"customer=":{"name":"customer=","qualifiedName":"stripe/stripe.ChargeCreation.customer=","comment":"","commentFrom":"stripe.ChargeCreation.customer=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"customer":{"name":"customer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cardId=":{"name":"cardId=","qualifiedName":"stripe/stripe.ChargeCreation.cardId=","comment":"","commentFrom":"stripe.ChargeCreation.cardId=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"cardId":{"name":"cardId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cardToken=":{"name":"cardToken=","qualifiedName":"stripe/stripe.ChargeCreation.cardToken=","comment":"","commentFrom":"stripe.ChargeCreation.cardToken=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"cardToken":{"name":"cardToken","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"card=":{"name":"card=","qualifiedName":"stripe/stripe.ChargeCreation.card=","comment":"","commentFrom":"stripe.ChargeCreation.card=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"card":{"name":"card","optional":false,"named":false,"default":false,"type":[{"outer":"stripe/stripe.CardCreation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"description=":{"name":"description=","qualifiedName":"stripe/stripe.ChargeCreation.description=","comment":"","commentFrom":"stripe.ChargeCreation.description=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"stripe/stripe.ChargeCreation.metadata=","comment":"","commentFrom":"stripe.ChargeCreation.metadata=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"capture=":{"name":"capture=","qualifiedName":"stripe/stripe.ChargeCreation.capture=","comment":"","commentFrom":"stripe.ChargeCreation.capture=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"capture":{"name":"capture","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"statementDescription=":{"name":"statementDescription=","qualifiedName":"stripe/stripe.ChargeCreation.statementDescription=","comment":"","commentFrom":"stripe.ChargeCreation.statementDescription=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statementDescription":{"name":"statementDescription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applicationFee=":{"name":"applicationFee=","qualifiedName":"stripe/stripe.ChargeCreation.applicationFee=","comment":"","commentFrom":"stripe.ChargeCreation.applicationFee=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"applicationFee":{"name":"applicationFee","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"stripe/stripe.ChargeCreation.create","comment":"","commentFrom":"stripe.ChargeCreation.create","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Charge","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.ChargeCreation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.ChargeCreation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.ChargeCreation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.ChargeCreation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.ChargeCreation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.ChargeCreation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.ChargeCreation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.ChargeCreation.noSuchMethod","comment":"<p><a>stripe/stripe.ChargeCreation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.ChargeCreation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.ChargeCreation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.ChargeCreation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
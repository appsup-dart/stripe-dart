{"name":"CouponCreation","qualifiedName":"stripe/stripe.CouponCreation","comment":"<p>Used to create a <a>stripe/stripe.Coupon</a></p>\n<p>A coupon has either a percent<em>off or an amount</em>off and currency. If you set\nan amount<em>off, that amount will be subtracted from any invoice's subtotal.\nFor example, an invoice with a subtotal of $10 will have a final total of $0\nif a coupon with an amount</em>off of 2000 is applied to it and an invoice with\na subtotal of $30 will have a final total of $10 if a coupon with an\namount_off of 2000 is applied to it.</p>","isAbstract":false,"superclass":"stripe/stripe.ResourceRequest","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"id=":{"name":"id=","qualifiedName":"stripe/stripe.CouponCreation.id=","comment":"<p>Unique string of your choice that will be used to identify this coupon\nwhen applying it a customer. This is often a specific code you’ll give to\nyour customer to use when signing up (e.g. FALL25OFF). If you don’t want\nto specify a particular code, you can leave the ID blank and we’ll\ngenerate a random code for you.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"duration=":{"name":"duration=","qualifiedName":"stripe/stripe.CouponCreation.duration=","comment":"<p>Specifies how long the discount will be in effect.\nCan be forever, once, or repeating.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"amountOff=":{"name":"amountOff=","qualifiedName":"stripe/stripe.CouponCreation.amountOff=","comment":"<p>A positive integer representing the amount to subtract from an invoice\ntotal (required if percent_off is not passed)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"amountOff":{"name":"amountOff","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"currency=":{"name":"currency=","qualifiedName":"stripe/stripe.CouponCreation.currency=","comment":"","commentFrom":"stripe.CouponCreation.currency=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currency":{"name":"currency","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"durationInMonths=":{"name":"durationInMonths=","qualifiedName":"stripe/stripe.CouponCreation.durationInMonths=","comment":"<p>required only if duration is repeating If duration is repeating,\na positive integer that specifies the number of months the discount will\nbe in effect</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"durationInMonths":{"name":"durationInMonths","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"maxRedemptions=":{"name":"maxRedemptions=","qualifiedName":"stripe/stripe.CouponCreation.maxRedemptions=","comment":"<p>A positive integer specifying the number of times the coupon can be\nredeemed before it’s no longer valid. For example, you might have a 50%\noff coupon that the first 20 readers of your blog can use.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"maxRedemptions":{"name":"maxRedemptions","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"stripe/stripe.CouponCreation.metadata=","comment":"<p>A set of key/value pairs that you can attach to a coupon object.\nIt can be useful for storing additional information about the coupon in\na structured format. This will be unset if you POST an empty value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"percentOff=":{"name":"percentOff=","qualifiedName":"stripe/stripe.CouponCreation.percentOff=","comment":"<p>A positive integer between 1 and 100 that represents the discount the\ncoupon will apply (required if amount_off is not passed)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"percentOff":{"name":"percentOff","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"redeemBy=":{"name":"redeemBy=","qualifiedName":"stripe/stripe.CouponCreation.redeemBy=","comment":"<p>UTC timestamp specifying the last time at which the coupon can be\nredeemed. After the redeem_by date, the coupon can no longer be applied\nto new customers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"redeemBy":{"name":"redeemBy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"stripe/stripe.CouponCreation.create","comment":"<p>Uses the values of <a>stripe/stripe.CouponCreation</a> to send a request to the Stripe API.\nReturns a <a>stripe/dart-async.Future</a> with a new <a>stripe/stripe.Coupon</a> from the response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Coupon","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.CouponCreation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.CouponCreation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.CouponCreation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.CouponCreation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.CouponCreation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.CouponCreation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.CouponCreation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.CouponCreation.noSuchMethod","comment":"<p><a>stripe/stripe.CouponCreation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.CouponCreation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.CouponCreation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.CouponCreation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
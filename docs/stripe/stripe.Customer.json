{"name":"Customer","qualifiedName":"stripe/stripe.Customer","comment":"<p>Customer objects allow you to perform recurring charges and track multiple\ncharges that are associated with the same customer. The API allows you to\ncreate, delete, and update your customers. You can retrieve individual\ncustomers as well as a list of all your customers.</p>","isAbstract":false,"superclass":"stripe/stripe.ApiResource","implements":[],"subclass":[],"variables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Customer.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Resource.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"id":{"name":"id","qualifiedName":"stripe/stripe.Customer.id","comment":"","commentFrom":"stripe.Customer.id","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"created":{"name":"created","qualifiedName":"stripe/stripe.Customer.created","comment":"","commentFrom":"stripe.Customer.created","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"livemode":{"name":"livemode","qualifiedName":"stripe/stripe.Customer.livemode","comment":"","commentFrom":"stripe.Customer.livemode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"accountBalance":{"name":"accountBalance","qualifiedName":"stripe/stripe.Customer.accountBalance","comment":"<p>Current balance, if any, being stored on the customer’s account.\nIf negative, the customer has credit to apply to the next invoice.\nIf positive, the customer has an amount owed that will be added to the\nnext invoice. The balance does not refer to any unpaid invoices;\nit solely takes into account amounts that have yet to be successfully\napplied to any invoice. This balance is only taken into account for\nrecurring charges.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"currency":{"name":"currency","qualifiedName":"stripe/stripe.Customer.currency","comment":"<p>The currency the customer can be charged in for recurring billing purposes\n(subscriptions, invoices, invoice items).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"defaultCard":{"name":"defaultCard","qualifiedName":"stripe/stripe.Customer.defaultCard","comment":"<p>ID of the default credit card attached to the customer</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"defaultCardExpand":{"name":"defaultCardExpand","qualifiedName":"stripe/stripe.Customer.defaultCardExpand","comment":"<p><a>stripe/stripe.Card</a> object of the default credit card.\nThis will return null if you call retrieve without expanding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Card","inner":[]}],"parameters":{},"annotations":[]},"delinquent":{"name":"delinquent","qualifiedName":"stripe/stripe.Customer.delinquent","comment":"<p>Whether or not the latest charge for the customer’s latest invoice\nhas failed</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"description":{"name":"description","qualifiedName":"stripe/stripe.Customer.description","comment":"","commentFrom":"stripe.Customer.description","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"discount":{"name":"discount","qualifiedName":"stripe/stripe.Customer.discount","comment":"<p>Describes the current discount active on the customer, if there is one.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Discount","inner":[]}],"parameters":{},"annotations":[]},"email":{"name":"email","qualifiedName":"stripe/stripe.Customer.email","comment":"","commentFrom":"stripe.Customer.email","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"stripe/stripe.Customer.metadata","comment":"<p>A set of key/value pairs that you can attach to a customer object.\nIt can be useful for storing additional information about the customer\nin a structured format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"nextRecurringCharge":{"name":"nextRecurringCharge","qualifiedName":"stripe/stripe.Customer.nextRecurringCharge","comment":"","commentFrom":"stripe.Customer.nextRecurringCharge","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.NextRecurringCharge","inner":[]}],"parameters":{},"annotations":[]},"subscriptions":{"name":"subscriptions","qualifiedName":"stripe/stripe.Customer.subscriptions","comment":"","commentFrom":"stripe.Customer.subscriptions","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.SubscriptionCollection","inner":[]}],"parameters":{},"annotations":[]},"cards":{"name":"cards","qualifiedName":"stripe/stripe.Customer.cards","comment":"","commentFrom":"stripe.Customer.cards","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.CardCollection","inner":[]}],"parameters":{},"annotations":[]},"deleted":{"name":"deleted","qualifiedName":"stripe/stripe.Customer.deleted","comment":"<p>When requesting the ID of a customer that has been deleted, a subset of\nthe customer's information will be returned, including a \"deleted\"\nproperty, which will be true.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"fromMap":{"name":"fromMap","qualifiedName":"stripe/stripe.Customer.Customer-fromMap","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"dataMap":{"name":"dataMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"retrieve":{"name":"retrieve","qualifiedName":"stripe/stripe.Customer.retrieve","comment":"<p>Returns a customer object if a valid identifier was provided.</p>\n<p>If you need the <a>stripe/stripe.Card</a> object of the default credit card you can avoid\nan additional API request:</p>\n<pre><code>Customer.retrieve(id, data: {\"expand\": [\"default_card\"]})\n</code></pre>\n<p>then retrieve the <a>stripe/stripe.Card</a> using <a>stripe/stripe.Customer.defaultCardExpand</a></p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Customer","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"list":{"name":"list","qualifiedName":"stripe/stripe.Customer.list","comment":"<p>Returns a <a>stripe/stripe.CustomerCollection</a> of your customers.\nThe customers are returned sorted by creation date, with the most recently\ncreated customers appearing first.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.CustomerCollection","inner":[]}]}],"parameters":{"limit":{"name":"limit","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"startingAfter":{"name":"startingAfter","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"endingBefore":{"name":"endingBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"delete":{"name":"delete","qualifiedName":"stripe/stripe.Customer.delete","comment":"<p>Permanently deletes a customer. It cannot be undone.\nAlso immediately cancels any active subscription on the customer.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.Customer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.Customer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.Customer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.Customer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.Customer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.Customer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.Customer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.Customer.noSuchMethod","comment":"<p><a>stripe/stripe.Customer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.Customer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.Customer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.Customer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
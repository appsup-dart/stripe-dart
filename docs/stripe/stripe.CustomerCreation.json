{"name":"CustomerCreation","qualifiedName":"stripe/stripe.CustomerCreation","comment":"<p>Used to create a new <a>stripe/stripe.Customer</a></p>","isAbstract":false,"superclass":"stripe/stripe.ResourceRequest","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"accountBalance=":{"name":"accountBalance=","qualifiedName":"stripe/stripe.CustomerCreation.accountBalance=","comment":"<p>An integer amount in cents that is the starting account balance for your\ncustomer. A negative amount represents a credit that will be used before\nattempting any charges to the customer’s card; a positive amount will be\nadded to the next invoice.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"accountBalance":{"name":"accountBalance","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"card=":{"name":"card=","qualifiedName":"stripe/stripe.CustomerCreation.card=","comment":"<p>The card can either be a token, like the ones returned by our Stripe.js,\nor a dictionary containing a user’s credit card details\n(with the options shown below). Passing card will create a new card,\nmake it the new customer default card, and delete the old customer default\nif one exists. If you want to add additional cards instead of replacing\nthe existing default, use the card creation API. Whenever you attach a\ncard to a customer, Stripe will automatically validate the card.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"card":{"name":"card","optional":false,"named":false,"default":false,"type":[{"outer":"stripe/stripe.CardCreation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"coupon=":{"name":"coupon=","qualifiedName":"stripe/stripe.CustomerCreation.coupon=","comment":"<p>If you provide a coupon code, the customer will have a discount applied on\nall recurring charges. Charges you create through the API will not have\nthe discount.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"coupon":{"name":"coupon","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"description=":{"name":"description=","qualifiedName":"stripe/stripe.CustomerCreation.description=","comment":"<p>An arbitrary string that you can attach to a customer object.\nIt is displayed alongside the customer in the dashboard.\nThis will be unset if you POST an empty value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"email=":{"name":"email=","qualifiedName":"stripe/stripe.CustomerCreation.email=","comment":"<p>Customer’s email address. It’s displayed alongside the customer in your\ndashboard and can be useful for searching and tracking. This will be unset\nif you POST an empty value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"email":{"name":"email","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"stripe/stripe.CustomerCreation.metadata=","comment":"<p>A set of key/value pairs that you can attach to a customer object.\nIt can be useful for storing additional information about the customer in\na structured format. This will be unset if you POST an empty value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"plan=":{"name":"plan=","qualifiedName":"stripe/stripe.CustomerCreation.plan=","comment":"<p>The identifier of the plan to subscribe the customer to. If provided,\nthe returned customer object has a ‘subscription’ attribute describing\nthe state of the customer’s subscription</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"plan":{"name":"plan","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"quantity=":{"name":"quantity=","qualifiedName":"stripe/stripe.CustomerCreation.quantity=","comment":"<p>The quantity you’d like to apply to the subscription you’re creating.\nFor example, if your plan is 10 cents/user/month, and your customer has\n5 users, you could pass 5 as the quantity to have the customer charged\n50 cents (5 x 10 cents) monthly. Defaults to 1 if not set. Only applies\nwhen the plan parameter is also provided.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"quantity":{"name":"quantity","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"trialEnd=":{"name":"trialEnd=","qualifiedName":"stripe/stripe.CustomerCreation.trialEnd=","comment":"<p>UTC integer timestamp representing the end of the trial period the\ncustomer will get before being charged for the first time. If set,\ntrial_end will override the default trial period of the plan the customer\nis being subscribed to.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trialEnd":{"name":"trialEnd","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"trialEndNow":{"name":"trialEndNow","qualifiedName":"stripe/stripe.CustomerCreation.trialEndNow","comment":"<p>The special value now can be provided to end the\ncustomer’s trial immediately. Only applies when the plan parameter is\nalso provided.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"create":{"name":"create","qualifiedName":"stripe/stripe.CustomerCreation.create","comment":"<p>Uses the values of <a>stripe/stripe.CustomerCreation</a> to send a request to the Stripe API.\nReturns a <a>stripe/dart-async.Future</a> with a new <a>stripe/stripe.Customer</a> from the response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Customer","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.CustomerCreation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.CustomerCreation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.CustomerCreation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.CustomerCreation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.CustomerCreation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.CustomerCreation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.CustomerCreation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.CustomerCreation.noSuchMethod","comment":"<p><a>stripe/stripe.CustomerCreation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.CustomerCreation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.CustomerCreation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.CustomerCreation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
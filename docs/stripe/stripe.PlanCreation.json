{"name":"PlanCreation","qualifiedName":"stripe/stripe.PlanCreation","comment":"<p>Used to create a new <a>stripe/stripe.Plan</a></p>","isAbstract":false,"superclass":"stripe/stripe.ResourceRequest","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"id=":{"name":"id=","qualifiedName":"stripe/stripe.PlanCreation.id=","comment":"<p>Unique string of your choice that will be used to identify this plan when\nsubscribing a customer. This could be an identifier like \"gold\" or\na primary key from your own database.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"amount=":{"name":"amount=","qualifiedName":"stripe/stripe.PlanCreation.amount=","comment":"<p>A positive integer in cents (or 0 for a free plan) representing how much\nto charge (on a recurring basis).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"amount":{"name":"amount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"currency=":{"name":"currency=","qualifiedName":"stripe/stripe.PlanCreation.currency=","comment":"<p>3-letter ISO code for currency.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currency":{"name":"currency","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"interval=":{"name":"interval=","qualifiedName":"stripe/stripe.PlanCreation.interval=","comment":"<p>Specifies billing frequency. Either week, month or year.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"interval":{"name":"interval","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"intervalCount=":{"name":"intervalCount=","qualifiedName":"stripe/stripe.PlanCreation.intervalCount=","comment":"<p>The number of intervals between each subscription billing. For example,\ninterval=month and interval_count=3 bills every 3 months. Maximum of one\nyear interval allowed (1 year, 12 months, or 52 weeks).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"intervalCount":{"name":"intervalCount","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"name=":{"name":"name=","qualifiedName":"stripe/stripe.PlanCreation.name=","comment":"<p>Name of the plan, to be displayed on invoices and in the web interface.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"stripe.Required","parameters":[]}]},"trialPeriodDays=":{"name":"trialPeriodDays=","qualifiedName":"stripe/stripe.PlanCreation.trialPeriodDays=","comment":"<p>Specifies a trial period in (an integer number of) days.\nIf you include a trial period, the customer won't be billed for the first\ntime until the trial period ends. If the customer cancels before the trial\nperiod is over, she'll never be billed at all.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"trialPeriodDays":{"name":"trialPeriodDays","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"stripe/stripe.PlanCreation.metadata=","comment":"<p>A set of key/value pairs that you can attach to a plan object.\nIt can be useful for storing additional information about the plan in a\nstructured format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"statementDescription=":{"name":"statementDescription=","qualifiedName":"stripe/stripe.PlanCreation.statementDescription=","comment":"<p>An arbitrary string to be displayed on your customers' credit card\nstatements (alongside your company name) for charges created by this plan.\n This may be up to 15 characters. As an example, if your website is\n RunClub and you specify Silver Plan, the user will see\n RUNCLUB SILVER PLAN.\n The statement description may not include &lt;>\"' characters.\n While most banks display this information consistently, some may display\n it incorrectly or not at all.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statementDescription":{"name":"statementDescription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"stripe/stripe.PlanCreation.create","comment":"<p>Uses the values of <a>stripe/stripe.PlanCreation</a> to send a request to the Stripe API.\nReturns a <a>stripe/dart-async.Future</a> with a new <a>stripe/stripe.Plan</a> from the response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"stripe/stripe.Plan","inner":[]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.PlanCreation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.PlanCreation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.PlanCreation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.PlanCreation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.PlanCreation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.PlanCreation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.PlanCreation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.PlanCreation.noSuchMethod","comment":"<p><a>stripe/stripe.PlanCreation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.PlanCreation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.PlanCreation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.PlanCreation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
{"name":"Subscription","qualifiedName":"stripe/stripe.Subscription","comment":"<p>Subscriptions allow you to charge a customer's card on a recurring basis.\nA subscription ties a customer to a particular plan you've created.</p>","isAbstract":false,"superclass":"stripe/stripe.ApiResource","implements":[],"subclass":[],"variables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Subscription.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"objectName":{"name":"objectName","qualifiedName":"stripe/stripe.Resource.objectName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"id":{"name":"id","qualifiedName":"stripe/stripe.Subscription.id","comment":"","commentFrom":"stripe.Subscription.id","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"cancelAtPeriodEnd":{"name":"cancelAtPeriodEnd","qualifiedName":"stripe/stripe.Subscription.cancelAtPeriodEnd","comment":"<p>If the subscription has been canceled with the at<em>period</em>end flag set to\ntrue, cancel<em>at</em>period_end on the subscription will be true.\nYou can use this attribute to determine whether a subscription that has\na status of active is scheduled to be canceled at the end of the current\nperiod.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"customer":{"name":"customer","qualifiedName":"stripe/stripe.Subscription.customer","comment":"","commentFrom":"stripe.Subscription.customer","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"plan":{"name":"plan","qualifiedName":"stripe/stripe.Subscription.plan","comment":"<p>Hash describing the plan the customer is subscribed to</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Plan","inner":[]}],"parameters":{},"annotations":[]},"quantity":{"name":"quantity","qualifiedName":"stripe/stripe.Subscription.quantity","comment":"","commentFrom":"stripe.Subscription.quantity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"start":{"name":"start","qualifiedName":"stripe/stripe.Subscription.start","comment":"<p>Date the subscription started</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"status":{"name":"status","qualifiedName":"stripe/stripe.Subscription.status","comment":"<p>Possible values are trialing, active, past<em>due, canceled, or unpaid.\nA subscription still in its trial period is trialing and moves to active\nwhen the trial period is over.\nWhen payment to renew the subscription fails, the subscription becomes\npast</em>due. After Stripe has exhausted all payment retry attempts,\nthe subscription ends up with a status of either canceled or unpaid\ndepending on your retry settings. Note that when a subscription has\na status of unpaid, no subsequent invoices will be attempted\n(invoices will be created, but then immediately automatically closed).\nAfter receiving updated card details from a customer, you may choose to\nreopen and pay their closed invoices.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"applicationFeePercent":{"name":"applicationFeePercent","qualifiedName":"stripe/stripe.Subscription.applicationFeePercent","comment":"<p>A positive decimal that represents the fee percentage of the subscription\ninvoice amount that will be transferred to the application ownerâ€™s\nStripe account each billing period.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"canceledAt":{"name":"canceledAt","qualifiedName":"stripe/stripe.Subscription.canceledAt","comment":"<p>If the subscription has been canceled, the date of that cancellation.\nIf the subscription was canceled with cancel<em>at</em>period<em>end,\ncanceled</em>at will still reflect the date of the initial cancellation\nrequest, not the end of the subscription period when the subscription is\nautomatically moved to a canceled state.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"currentPeriodEnd":{"name":"currentPeriodEnd","qualifiedName":"stripe/stripe.Subscription.currentPeriodEnd","comment":"<p>End of the current period that the subscription has been invoiced for.\nAt the end of this period, a new invoice will be created.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"currentPeriodStart":{"name":"currentPeriodStart","qualifiedName":"stripe/stripe.Subscription.currentPeriodStart","comment":"<p>Start of the current period that the subscription has been invoiced for</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"discount":{"name":"discount","qualifiedName":"stripe/stripe.Subscription.discount","comment":"<p>Describes the current discount applied to this subscription,\nif there is one. When billing, a discount applied to a subscription\noverrides a discount applied on a customer-wide basis.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"stripe/stripe.Discount","inner":[]}],"parameters":{},"annotations":[]},"endedAt":{"name":"endedAt","qualifiedName":"stripe/stripe.Subscription.endedAt","comment":"<p>If the subscription has ended (either because it was canceled or because\nthe customer was switched to a subscription to a new plan),\nthe date the subscription ended</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"trialEnd":{"name":"trialEnd","qualifiedName":"stripe/stripe.Subscription.trialEnd","comment":"<p>If the subscription has a trial, the end of that trial.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"trialStart":{"name":"trialStart","qualifiedName":"stripe/stripe.Subscription.trialStart","comment":"<p>If the subscription has a trial, the beginning of that trial.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"fromMap":{"name":"fromMap","qualifiedName":"stripe/stripe.Subscription.Subscription-fromMap","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"dataMap":{"name":"dataMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"stripe/stripe.Subscription.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>stripe/stripe.Subscription.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"stripe/stripe.Subscription.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"stripe/stripe.Subscription.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>stripe/stripe.Subscription.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>stripe/stripe.Subscription.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"stripe/stripe.Subscription.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"stripe/stripe.Subscription.noSuchMethod","comment":"<p><a>stripe/stripe.Subscription.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>stripe/stripe.Subscription.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>stripe/stripe.Subscription.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>stripe/stripe.Subscription.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}